(()=>{"use strict";var __webpack_modules__={637:()=>{eval('\n;// CONCATENATED MODULE: ./src/components/Card.js\n\n\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nvar Card = /*#__PURE__*/function () {\n  function Card(card, templateSelector, currentUserId, _ref) {\n    var handleCardClick = _ref.handleCardClick,\n      handleDeleteIconClick = _ref.handleDeleteIconClick,\n      handleAddLike = _ref.handleAddLike,\n      handleDeleteLike = _ref.handleDeleteLike;\n    _classCallCheck(this, Card);\n    this._name = card.name;\n    this._link = card.link;\n    this._likes = card.likes;\n    this._cardId = card._id;\n    this._templateSelector = templateSelector;\n    this._handleCardClick = handleCardClick;\n    this._handleDeleteIconClick = handleDeleteIconClick;\n    this._handleAddLike = handleAddLike;\n    this._handleDeleteLike = handleDeleteLike;\n    this._currentUserId = currentUserId;\n    this._ownerCard = card.owner._id === currentUserId;\n    this._liked = card.likes.find(function (user) {\n      return user._id === currentUserId;\n    });\n  }\n  _createClass(Card, [{\n    key: "_getTemplate",\n    value: function _getTemplate() {\n      var cardElement = document.querySelector(this._templateSelector).content.querySelector(".gallery__item").cloneNode(true);\n      return cardElement;\n    }\n  }, {\n    key: "generateCard",\n    value: function generateCard() {\n      this._element = this._getTemplate();\n      this._cardName = this._element.querySelector(".card__name");\n      this._cardPhoto = this._element.querySelector(".card__photo");\n      this._likeButton = this._element.querySelector(".card__like-button");\n      this._likeNum = this._element.querySelector(".card__like-num");\n      this._likeNum.textContent = this._likes.length;\n      this._trashButton = this._element.querySelector(".card__trash-button");\n      this._cardName.textContent = this._name;\n      this._cardPhoto.src = this._link;\n      this._cardPhoto.alt = "\\u0424\\u043E\\u0442\\u043E\\u0433\\u0440\\u0430\\u0444\\u0438\\u044F ".concat(this._name);\n\n      //Проверка на пренадлежность карточки\n      if (!this._ownerCard) {\n        this._trashButton.remove();\n      }\n      //Проверяем лайкнута ли карточка нами\n      this._cardLiked();\n      this._setEventListeners();\n      return this._element;\n    }\n  }, {\n    key: "_cardLiked",\n    value: function _cardLiked() {\n      if (this._liked) {\n        this._likeButton.classList.add("card__like-button_active");\n      }\n    }\n  }, {\n    key: "deleteCard",\n    value: function deleteCard() {\n      this._element.remove();\n      this._element = null;\n    }\n  }, {\n    key: "updateLikes",\n    value: function updateLikes(arrLikes) {\n      this._likes = arrLikes.likes;\n      this._likeNum.textContent = this._likes.length;\n      this._likeButton.classList.toggle("card__like-button_active");\n    }\n  }, {\n    key: "_setEventListeners",\n    value: function _setEventListeners() {\n      var _this = this;\n      this._cardPhoto.addEventListener("click", function () {\n        _this._handleCardClick(_this._cardName, _this._link);\n      });\n      this._likeButton.addEventListener("click", function () {\n        _this._likeButton.classList.contains("card__like-button_active") ? _this._handleDeleteLike(_this._cardId) : _this._handleAddLike(_this._cardId);\n      });\n      this._trashButton.addEventListener("click", function () {\n        _this._handleDeleteIconClick(_this._cardId);\n      });\n    }\n  }]);\n  return Card;\n}();\n;// CONCATENATED MODULE: ./src/components/FormValidator.js\n\n\nfunction FormValidator_typeof(obj) { "@babel/helpers - typeof"; return FormValidator_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, FormValidator_typeof(obj); }\nfunction FormValidator_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction FormValidator_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, FormValidator_toPropertyKey(descriptor.key), descriptor); } }\nfunction FormValidator_createClass(Constructor, protoProps, staticProps) { if (protoProps) FormValidator_defineProperties(Constructor.prototype, protoProps); if (staticProps) FormValidator_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction FormValidator_toPropertyKey(arg) { var key = FormValidator_toPrimitive(arg, "string"); return FormValidator_typeof(key) === "symbol" ? key : String(key); }\nfunction FormValidator_toPrimitive(input, hint) { if (FormValidator_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (FormValidator_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nvar FormValidator = /*#__PURE__*/function () {\n  function FormValidator(formElements, form) {\n    FormValidator_classCallCheck(this, FormValidator);\n    this._formElements = formElements;\n    this._form = form;\n    this._inputList = Array.from(this._form.querySelectorAll(this._formElements.inputSelector));\n    this._button = this._form.querySelector("".concat(this._formElements.submitButtonSelector));\n  }\n  FormValidator_createClass(FormValidator, [{\n    key: "_showInputError",\n    value: function _showInputError(inputElement, errorMessage) {\n      var errorElement = document.querySelector(".".concat(inputElement.id, "-error"));\n      inputElement.classList.add("".concat(this._formElements.inputErrorClass));\n      errorElement.textContent = errorMessage;\n      errorElement.classList.add("".concat(this._formElements.errorClass));\n    }\n  }, {\n    key: "_hideInputError",\n    value: function _hideInputError(inputElement) {\n      var errorElement = this._form.querySelector(".".concat(inputElement.id, "-error"));\n      inputElement.classList.remove("".concat(this._formElements.inputErrorClass));\n      errorElement.classList.remove("".concat(this._formElements.errorClass));\n      errorElement.textContent = "";\n    }\n  }, {\n    key: "_checkInputValidity",\n    value: function _checkInputValidity(inputElement) {\n      if (!inputElement.validity.valid) {\n        this._showInputError(inputElement, inputElement.validationMessage);\n      } else {\n        this._hideInputError(inputElement);\n      }\n    }\n  }, {\n    key: "_invalidInput",\n    value: function _invalidInput() {\n      return this._inputList.some(function (input) {\n        return !input.validity.valid;\n      });\n    }\n  }, {\n    key: "_addDisabledButton",\n    value: function _addDisabledButton() {\n      this._button.classList.add("".concat(this._formElements.inactiveButtonClass));\n      this._button.disabled = true;\n    }\n  }, {\n    key: "_removeDisabledButton",\n    value: function _removeDisabledButton() {\n      this._button.classList.remove("".concat(this._formElements.inactiveButtonClass));\n      this._button.disabled = false;\n    }\n  }, {\n    key: "_toggleButtonState",\n    value: function _toggleButtonState() {\n      if (this._invalidInput()) {\n        this._addDisabledButton();\n      } else {\n        this._removeDisabledButton();\n      }\n    }\n  }, {\n    key: "_setEventListeners",\n    value: function _setEventListeners() {\n      var _this = this;\n      this._toggleButtonState();\n      this._inputList.forEach(function (input) {\n        input.addEventListener("input", function () {\n          _this._checkInputValidity(input);\n          _this._toggleButtonState();\n        });\n      });\n    }\n  }, {\n    key: "resetValidation",\n    value: function resetValidation() {\n      var _this2 = this;\n      this._inputList.forEach(function (input) {\n        _this2._hideInputError(input);\n      });\n      this._toggleButtonState();\n    }\n  }, {\n    key: "enableValidation",\n    value: function enableValidation() {\n      this._setEventListeners();\n    }\n  }]);\n  return FormValidator;\n}();\n;// CONCATENATED MODULE: ./src/utils/variables.js\n\n\nvar formElements = {\n  formSelector: ".popup__form",\n  inputSelector: ".popup__input",\n  submitButtonSelector: ".popup__save",\n  inactiveButtonClass: "popup__save_disabled",\n  inputErrorClass: "popup__input_type_error",\n  errorClass: "popup__input-error"\n};\nvar TOKEN = "5fed34a4-12fb-4e00-a0af-c237a59bdc22";\nvar URL = "https://mesto.nomoreparties.co/v1/cohort-61/";\nvar popups = Array.from(document.querySelectorAll(".popup"));\nvar popupCloseButton = document.querySelector(".popup__close ");\nvar cardForm = document.querySelector(".popup__form_card");\nvar profileForm = document.querySelector(".popup__form_profile");\nvar avatarForm = document.querySelector(".popup__form_avatar");\nvar nameCardFromPopup = cardForm.querySelector(".popup__input_js_name-card");\nvar galleryContainer = document.querySelector(".gallery__list");\nvar inputCardFromPopup = cardForm.querySelector(".popup__input_js_link-card");\nvar nameInput = document.querySelector(".popup__input_js_name");\nvar jobInput = document.querySelector(".popup__input_js_profession");\nvar profileEditButton = document.querySelector(".profile__edit");\nvar cardAddButton = document.querySelector(".profile__add");\nvar editAvatarButton = document.querySelector(".profile__avatar-btn");\nvar profileAvatar = document.querySelector(".profile__avatar");\nvar buttonClosePopupProfile = document.querySelector(".close-profile-form");\nvar buttonCloseCardForm = document.querySelector(".close-card-form");\nvar buttonClosePopup = document.querySelector(".close-photo-popup");\nvar submitButtonInAvatarPopup = document.querySelector(".submit-avatar-form");\nvar submitButtonInProfilePopup = document.querySelector(".submit-profile-form");\nvar submitButtonInCardPopup = document.querySelector(".submit-card-form");\nvar deleteCardButton = document.querySelector(".delete-card-button");\n;// CONCATENATED MODULE: ./src/components/Api.js\nfunction Api_typeof(obj) { "@babel/helpers - typeof"; return Api_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, Api_typeof(obj); }\nfunction Api_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction Api_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, Api_toPropertyKey(descriptor.key), descriptor); } }\nfunction Api_createClass(Constructor, protoProps, staticProps) { if (protoProps) Api_defineProperties(Constructor.prototype, protoProps); if (staticProps) Api_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction Api_toPropertyKey(arg) { var key = Api_toPrimitive(arg, "string"); return Api_typeof(key) === "symbol" ? key : String(key); }\nfunction Api_toPrimitive(input, hint) { if (Api_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (Api_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nvar Api = /*#__PURE__*/function () {\n  function Api(URL, TOKEN) {\n    Api_classCallCheck(this, Api);\n    this._URL = URL;\n    this._TOKEN = TOKEN;\n  }\n  Api_createClass(Api, [{\n    key: "_getHeaders",\n    value: function _getHeaders() {\n      return {\n        "Content-Type": "application/json",\n        authorization: this._TOKEN\n      };\n    }\n  }, {\n    key: "_getJson",\n    value: function _getJson(res) {\n      {\n        if (res.ok) {\n          return res.json();\n        }\n        return Promise.reject("\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430: ".concat(res.status, " \\u0447\\u0442\\u043E \\u0442\\u043E \\u0438\\u0434\\u0435\\u0442 \\u043D\\u0435 \\u043F\\u043E \\u043F\\u043B\\u0430\\u043D\\u0443"));\n      }\n    }\n  }, {\n    key: "getUser",\n    value: function getUser() {\n      var promise = fetch("".concat(this._URL, "users/me"), {\n        headers: this._getHeaders()\n      });\n      return promise.then(this._getJson);\n    }\n  }, {\n    key: "getCards",\n    value: function getCards() {\n      var promise = fetch("".concat(this._URL, "cards"), {\n        headers: this._getHeaders()\n      });\n      return promise.then(this._getJson);\n    }\n  }, {\n    key: "sendProfile",\n    value: function sendProfile(data) {\n      var promise = fetch("".concat(this._URL, "users/me"), {\n        method: "PATCH",\n        headers: this._getHeaders(),\n        body: JSON.stringify({\n          name: data.name,\n          about: data.job\n        })\n      });\n      return promise.then(this._getJson);\n    }\n  }, {\n    key: "sendCard",\n    value: function sendCard(data) {\n      var promise = fetch("".concat(this._URL, "cards"), {\n        method: "POST",\n        headers: this._getHeaders(),\n        body: JSON.stringify({\n          name: data.name,\n          link: data.link\n        })\n      });\n      return promise.then(this._getJson);\n    }\n  }, {\n    key: "deleteCard",\n    value: function deleteCard(id) {\n      var promise = fetch("".concat(this._URL, "cards/").concat(id), {\n        method: "DELETE",\n        headers: this._getHeaders()\n      });\n      return promise.then(this._getJson);\n    }\n  }, {\n    key: "addLike",\n    value: function addLike(id) {\n      var promise = fetch("".concat(this._URL, "cards/").concat(id, "/likes"), {\n        method: "PUT",\n        headers: this._getHeaders()\n      });\n      return promise.then(this._getJson);\n    }\n  }, {\n    key: "deleteLike",\n    value: function deleteLike(id) {\n      var promise = fetch("".concat(this._URL, "cards/").concat(id, "/likes"), {\n        method: "DELETE",\n        headers: this._getHeaders()\n      });\n      return promise.then(this._getJson);\n    }\n  }, {\n    key: "setAvatar",\n    value: function setAvatar(avatar) {\n      var promise = fetch("".concat(this._URL, "users/me/avatar"), {\n        method: "PATCH",\n        headers: this._getHeaders(),\n        body: JSON.stringify({\n          avatar: avatar.link\n        })\n      });\n      return promise.then(this._getJson);\n    }\n  }]);\n  return Api;\n}();\n;// CONCATENATED MODULE: ./src/components/Section.js\n\n\nfunction Section_typeof(obj) { "@babel/helpers - typeof"; return Section_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, Section_typeof(obj); }\nfunction Section_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction Section_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, Section_toPropertyKey(descriptor.key), descriptor); } }\nfunction Section_createClass(Constructor, protoProps, staticProps) { if (protoProps) Section_defineProperties(Constructor.prototype, protoProps); if (staticProps) Section_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction Section_toPropertyKey(arg) { var key = Section_toPrimitive(arg, "string"); return Section_typeof(key) === "symbol" ? key : String(key); }\nfunction Section_toPrimitive(input, hint) { if (Section_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (Section_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nvar Section = /*#__PURE__*/function () {\n  function Section(_ref, containerSelector) {\n    var items = _ref.items,\n      renderer = _ref.renderer;\n    Section_classCallCheck(this, Section);\n    this._items = items;\n    this._renderer = renderer;\n    this._container = document.querySelector(containerSelector);\n  }\n  Section_createClass(Section, [{\n    key: "addItem",\n    value: function addItem() {\n      var _this = this;\n      this._items.forEach(function (item) {\n        _this._renderer(item);\n      });\n    }\n  }, {\n    key: "setItem",\n    value: function setItem(element) {\n      this._container.append(element);\n    }\n  }]);\n  return Section;\n}();\n;// CONCATENATED MODULE: ./src/components/Popup.js\n\n\nfunction Popup_typeof(obj) { "@babel/helpers - typeof"; return Popup_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, Popup_typeof(obj); }\nfunction Popup_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction Popup_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, Popup_toPropertyKey(descriptor.key), descriptor); } }\nfunction Popup_createClass(Constructor, protoProps, staticProps) { if (protoProps) Popup_defineProperties(Constructor.prototype, protoProps); if (staticProps) Popup_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction Popup_toPropertyKey(arg) { var key = Popup_toPrimitive(arg, "string"); return Popup_typeof(key) === "symbol" ? key : String(key); }\nfunction Popup_toPrimitive(input, hint) { if (Popup_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (Popup_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nvar Popup = /*#__PURE__*/function () {\n  function Popup(selector) {\n    Popup_classCallCheck(this, Popup);\n    this._popup = document.querySelector(selector);\n    this._buttonClose = this._popup.querySelector(".popup__close");\n    this._escClose = this._handleEscClose.bind(this);\n  }\n  Popup_createClass(Popup, [{\n    key: "_handleEscClose",\n    value: function _handleEscClose(evt) {\n      if (evt.key === "Escape") {\n        this.close();\n      }\n    }\n  }, {\n    key: "open",\n    value: function open() {\n      this._popup.classList.add("popup_opened");\n      document.addEventListener("keydown", this._escClose);\n    }\n  }, {\n    key: "close",\n    value: function close() {\n      this._popup.classList.remove("popup_opened");\n      document.removeEventListener("keydown", this._escClose);\n    }\n  }, {\n    key: "setEventListeners",\n    value: function setEventListeners() {\n      var _this = this;\n      this._buttonClose.addEventListener("click", function () {\n        _this.close();\n      });\n      this._popup.addEventListener("click", function (evt) {\n        var targetElement = evt.target;\n        if (targetElement.classList.contains("popup_opened")) {\n          _this.close();\n        }\n      });\n    }\n  }]);\n  return Popup;\n}();\n;// CONCATENATED MODULE: ./src/components/PopupWithImage.js\n\n\nfunction PopupWithImage_typeof(obj) { "@babel/helpers - typeof"; return PopupWithImage_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, PopupWithImage_typeof(obj); }\nfunction PopupWithImage_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction PopupWithImage_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, PopupWithImage_toPropertyKey(descriptor.key), descriptor); } }\nfunction PopupWithImage_createClass(Constructor, protoProps, staticProps) { if (protoProps) PopupWithImage_defineProperties(Constructor.prototype, protoProps); if (staticProps) PopupWithImage_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction PopupWithImage_toPropertyKey(arg) { var key = PopupWithImage_toPrimitive(arg, "string"); return PopupWithImage_typeof(key) === "symbol" ? key : String(key); }\nfunction PopupWithImage_toPrimitive(input, hint) { if (PopupWithImage_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (PopupWithImage_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nfunction _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _possibleConstructorReturn(self, call) { if (call && (PopupWithImage_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nvar PopupWithImage = /*#__PURE__*/function (_Popup) {\n  _inherits(PopupWithImage, _Popup);\n  var _super = _createSuper(PopupWithImage);\n  function PopupWithImage(selector) {\n    var _this;\n    PopupWithImage_classCallCheck(this, PopupWithImage);\n    _this = _super.call(this, selector);\n    _this._popupPhotoName = _this._popup.querySelector(".popup__caption");\n    _this._popupImage = _this._popup.querySelector(".popup__image");\n    return _this;\n  }\n  PopupWithImage_createClass(PopupWithImage, [{\n    key: "open",\n    value: function open(cardName, link) {\n      this._popupPhotoName.textContent = cardName.textContent;\n      this._popupImage.src = link;\n      this._popupImage.alt = "\\u0424\\u043E\\u0442\\u043E\\u0433\\u0440\\u0430\\u0444\\u0438\\u044F ".concat(cardName.textContent);\n      _get(_getPrototypeOf(PopupWithImage.prototype), "open", this).call(this);\n    }\n  }]);\n  return PopupWithImage;\n}(Popup);\n;// CONCATENATED MODULE: ./src/components/PopupWithForm.js\n\n\nfunction PopupWithForm_typeof(obj) { "@babel/helpers - typeof"; return PopupWithForm_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, PopupWithForm_typeof(obj); }\nfunction PopupWithForm_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction PopupWithForm_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, PopupWithForm_toPropertyKey(descriptor.key), descriptor); } }\nfunction PopupWithForm_createClass(Constructor, protoProps, staticProps) { if (protoProps) PopupWithForm_defineProperties(Constructor.prototype, protoProps); if (staticProps) PopupWithForm_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction PopupWithForm_toPropertyKey(arg) { var key = PopupWithForm_toPrimitive(arg, "string"); return PopupWithForm_typeof(key) === "symbol" ? key : String(key); }\nfunction PopupWithForm_toPrimitive(input, hint) { if (PopupWithForm_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (PopupWithForm_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nfunction PopupWithForm_get() { if (typeof Reflect !== "undefined" && Reflect.get) { PopupWithForm_get = Reflect.get.bind(); } else { PopupWithForm_get = function _get(target, property, receiver) { var base = PopupWithForm_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return PopupWithForm_get.apply(this, arguments); }\nfunction PopupWithForm_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = PopupWithForm_getPrototypeOf(object); if (object === null) break; } return object; }\nfunction PopupWithForm_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) PopupWithForm_setPrototypeOf(subClass, superClass); }\nfunction PopupWithForm_setPrototypeOf(o, p) { PopupWithForm_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return PopupWithForm_setPrototypeOf(o, p); }\nfunction PopupWithForm_createSuper(Derived) { var hasNativeReflectConstruct = PopupWithForm_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = PopupWithForm_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = PopupWithForm_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return PopupWithForm_possibleConstructorReturn(this, result); }; }\nfunction PopupWithForm_possibleConstructorReturn(self, call) { if (call && (PopupWithForm_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return PopupWithForm_assertThisInitialized(self); }\nfunction PopupWithForm_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction PopupWithForm_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction PopupWithForm_getPrototypeOf(o) { PopupWithForm_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return PopupWithForm_getPrototypeOf(o); }\n\nvar PopupWithForm = /*#__PURE__*/function (_Popup) {\n  PopupWithForm_inherits(PopupWithForm, _Popup);\n  var _super = PopupWithForm_createSuper(PopupWithForm);\n  function PopupWithForm(selector, _ref) {\n    var _this;\n    var handleFormSubmit = _ref.handleFormSubmit;\n    PopupWithForm_classCallCheck(this, PopupWithForm);\n    _this = _super.call(this, selector);\n    _this._handleFormSubmit = handleFormSubmit;\n    _this._form = _this._popup.querySelector(".popup__form");\n    _this._inputList = _this._form.querySelectorAll(".popup__input");\n    _this._submitButton = _this._form.querySelector(".popup__save");\n    return _this;\n  }\n  PopupWithForm_createClass(PopupWithForm, [{\n    key: "_getInputValues",\n    value: function _getInputValues() {\n      var _this2 = this;\n      this._formValues = {};\n      this._inputList.forEach(function (input) {\n        _this2._formValues[input.name] = input.value;\n      });\n      return this._formValues;\n    }\n  }, {\n    key: "close",\n    value: function close() {\n      PopupWithForm_get(PopupWithForm_getPrototypeOf(PopupWithForm.prototype), "close", this).call(this);\n      this._form.reset();\n    }\n  }, {\n    key: "setEventListeners",\n    value: function setEventListeners() {\n      var _this3 = this;\n      PopupWithForm_get(PopupWithForm_getPrototypeOf(PopupWithForm.prototype), "setEventListeners", this).call(this);\n      this._form.addEventListener("submit", function (evt) {\n        evt.preventDefault();\n        _this3._handleFormSubmit(_this3._getInputValues());\n      });\n    }\n  }]);\n  return PopupWithForm;\n}(Popup);\n;// CONCATENATED MODULE: ./src/components/PopupWithConfirmation.js\nfunction PopupWithConfirmation_typeof(obj) { "@babel/helpers - typeof"; return PopupWithConfirmation_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, PopupWithConfirmation_typeof(obj); }\nfunction PopupWithConfirmation_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction PopupWithConfirmation_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, PopupWithConfirmation_toPropertyKey(descriptor.key), descriptor); } }\nfunction PopupWithConfirmation_createClass(Constructor, protoProps, staticProps) { if (protoProps) PopupWithConfirmation_defineProperties(Constructor.prototype, protoProps); if (staticProps) PopupWithConfirmation_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction PopupWithConfirmation_toPropertyKey(arg) { var key = PopupWithConfirmation_toPrimitive(arg, "string"); return PopupWithConfirmation_typeof(key) === "symbol" ? key : String(key); }\nfunction PopupWithConfirmation_toPrimitive(input, hint) { if (PopupWithConfirmation_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (PopupWithConfirmation_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nfunction PopupWithConfirmation_get() { if (typeof Reflect !== "undefined" && Reflect.get) { PopupWithConfirmation_get = Reflect.get.bind(); } else { PopupWithConfirmation_get = function _get(target, property, receiver) { var base = PopupWithConfirmation_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return PopupWithConfirmation_get.apply(this, arguments); }\nfunction PopupWithConfirmation_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = PopupWithConfirmation_getPrototypeOf(object); if (object === null) break; } return object; }\nfunction PopupWithConfirmation_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) PopupWithConfirmation_setPrototypeOf(subClass, superClass); }\nfunction PopupWithConfirmation_setPrototypeOf(o, p) { PopupWithConfirmation_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return PopupWithConfirmation_setPrototypeOf(o, p); }\nfunction PopupWithConfirmation_createSuper(Derived) { var hasNativeReflectConstruct = PopupWithConfirmation_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = PopupWithConfirmation_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = PopupWithConfirmation_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return PopupWithConfirmation_possibleConstructorReturn(this, result); }; }\nfunction PopupWithConfirmation_possibleConstructorReturn(self, call) { if (call && (PopupWithConfirmation_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return PopupWithConfirmation_assertThisInitialized(self); }\nfunction PopupWithConfirmation_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction PopupWithConfirmation_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction PopupWithConfirmation_getPrototypeOf(o) { PopupWithConfirmation_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return PopupWithConfirmation_getPrototypeOf(o); }\n\nvar PopupWithConfirmation = /*#__PURE__*/function (_Popup) {\n  PopupWithConfirmation_inherits(PopupWithConfirmation, _Popup);\n  var _super = PopupWithConfirmation_createSuper(PopupWithConfirmation);\n  function PopupWithConfirmation(selector) {\n    var _this;\n    PopupWithConfirmation_classCallCheck(this, PopupWithConfirmation);\n    _this = _super.call(this, selector);\n    _this._confirmButton = _this._popup.querySelector(".popup__save");\n    return _this;\n  }\n  PopupWithConfirmation_createClass(PopupWithConfirmation, [{\n    key: "handleConfirmation",\n    value: function handleConfirmation(removeApi) {\n      this._removeCardApi = removeApi;\n    }\n  }, {\n    key: "setEventListeners",\n    value: function setEventListeners() {\n      var _this2 = this;\n      PopupWithConfirmation_get(PopupWithConfirmation_getPrototypeOf(PopupWithConfirmation.prototype), "setEventListeners", this).call(this);\n      this._confirmButton.addEventListener("click", function () {\n        _this2._removeCardApi();\n      });\n    }\n  }]);\n  return PopupWithConfirmation;\n}(Popup);\n;// CONCATENATED MODULE: ./src/components/UserInfo.js\n\n\nfunction UserInfo_typeof(obj) { "@babel/helpers - typeof"; return UserInfo_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, UserInfo_typeof(obj); }\nfunction UserInfo_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction UserInfo_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, UserInfo_toPropertyKey(descriptor.key), descriptor); } }\nfunction UserInfo_createClass(Constructor, protoProps, staticProps) { if (protoProps) UserInfo_defineProperties(Constructor.prototype, protoProps); if (staticProps) UserInfo_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction UserInfo_toPropertyKey(arg) { var key = UserInfo_toPrimitive(arg, "string"); return UserInfo_typeof(key) === "symbol" ? key : String(key); }\nfunction UserInfo_toPrimitive(input, hint) { if (UserInfo_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (UserInfo_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nvar UserInfo = /*#__PURE__*/function () {\n  function UserInfo(_ref) {\n    var name = _ref.name,\n      job = _ref.job,\n      avatar = _ref.avatar;\n    UserInfo_classCallCheck(this, UserInfo);\n    this._name = document.querySelector(name);\n    this._job = document.querySelector(job);\n    this._avatar = document.querySelector(avatar);\n  }\n  UserInfo_createClass(UserInfo, [{\n    key: "getUserInfo",\n    value: function getUserInfo() {\n      var userInfo = {\n        username: this._name.textContent,\n        job: this._job.textContent\n      };\n      return userInfo;\n    }\n  }, {\n    key: "setUserInfo",\n    value: function setUserInfo(dataForm) {\n      this._name.textContent = dataForm.name;\n      this._job.textContent = dataForm.about;\n      this._avatar.src = dataForm.avatar;\n    }\n  }]);\n  return UserInfo;\n}();\n;// CONCATENATED MODULE: ./src/pages/index.js\n\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nvar currentUserId;\n\n\n\n\n\n\n\n\n\n\n\n// Получаем данные о пользователе\nvar userInfo = new UserInfo({\n  name: ".profile__name",\n  job: ".profile__profession",\n  avatar: ".profile__avatar"\n});\n\n//Функция обновления аватара\nvar renderAvatar = function renderAvatar(avatar) {\n  profileAvatar.src = avatar;\n};\n\n//Загрузка информации о пользователе с серверa\nvar api = new Api(URL, TOKEN);\n\n//Функция создания карточки\nvar createCard = function createCard(cardItem, currentUserId) {\n  var card = new Card(cardItem, ".card-template", currentUserId, {\n    handleCardClick: function handleCardClick(cardName, link) {\n      photoPopup.open(cardName, link);\n    },\n    handleDeleteIconClick: function handleDeleteIconClick(cardId) {\n      confirmationPopup.open();\n      confirmationPopup.handleConfirmation(function () {\n        deleteCardButton.textContent = "Удаление ...";\n        api.deleteCard(cardId).then(function () {\n          card.deleteCard();\n          confirmationPopup.close();\n        }).catch(function (err) {\n          console.log(err);\n        }).finally(function () {\n          deleteCardButton.textContent = "Да";\n        });\n      });\n    },\n    handleAddLike: function handleAddLike(cardId) {\n      api.addLike(cardId).then(function (data) {\n        card.updateLikes(data);\n      }).catch(function (err) {\n        console.log(err);\n      });\n    },\n    handleDeleteLike: function handleDeleteLike(cardId) {\n      api.deleteLike(cardId).then(function (data) {\n        card.updateLikes(data);\n      }).catch(function (err) {\n        console.log(err);\n      });\n    }\n  });\n  var cardElement = card.generateCard();\n  return cardElement;\n};\n\n//Загрузка карточек с сервера и получаем текущего юзера\nPromise.all([api.getUser(), api.getCards()]).then(function (_ref) {\n  var _ref2 = _slicedToArray(_ref, 2),\n    user = _ref2[0],\n    cards = _ref2[1];\n  userInfo.setUserInfo(user);\n  currentUserId = user._id;\n  var cardElementAddToPage = new Section({\n    items: cards,\n    renderer: function renderer(cardItem) {\n      cardElementAddToPage.setItem(createCard(cardItem, currentUserId));\n    }\n  }, ".gallery__list");\n  cardElementAddToPage.addItem();\n}).catch(function (err) {\n  console.log(err);\n});\n\n//Добавляем классы попапам редактирования профиля и добавления карточки\nvar profilePopup = new PopupWithForm(".popup-profile", {\n  handleFormSubmit: function handleFormSubmit(dataForm) {\n    //Редактирование профиля\n    submitButtonInProfilePopup.textContent = "Сохранение...";\n    api.sendProfile(dataForm).then(function (data) {\n      userInfo.setUserInfo(data);\n    }).catch(function (err) {\n      console.log(err);\n    }).finally(function () {\n      submitButtonInProfilePopup.textContent = "Создать";\n    });\n    profilePopup.close();\n  }\n});\nprofilePopup.setEventListeners();\nvar cardPopup = new PopupWithForm(".popup-card", {\n  handleFormSubmit: function handleFormSubmit(dataForm) {\n    submitButtonInCardPopup.textContent = "Сохранение...";\n    api.sendCard(dataForm).then(function (data) {\n      galleryContainer.prepend(createCard(data, currentUserId));\n    }).catch(function (err) {\n      console.log(err);\n    }).finally(function () {\n      submitButtonInCardPopup.textContent = "Создать";\n    });\n    cardPopup.close();\n  }\n});\ncardPopup.setEventListeners();\nvar avatarPopup = new PopupWithForm(".popup-edit-avatar", {\n  handleFormSubmit: function handleFormSubmit(avatar) {\n    submitButtonInAvatarPopup.textContent = "Сохранение...";\n    api.setAvatar(avatar).then(function (data) {\n      renderAvatar(data.avatar);\n      avatarPopup.close();\n    }).catch(function (err) {\n      console.log(err);\n    }).finally(function () {\n      submitButtonInAvatarPopup.textContent = "Сохранить";\n    });\n  }\n});\navatarPopup.setEventListeners();\n\n//Создаем экземпляр класса попапа для подтверждения удаления карточки\nvar confirmationPopup = new PopupWithConfirmation(".popup-delete");\nconfirmationPopup.setEventListeners();\n\n//Добавляем класс попапу с картинкой\nvar photoPopup = new PopupWithImage(".popup-photo");\nphotoPopup.setEventListeners();\n\n//Создаем экземпляры класса валидации для отдельной формы\nvar cardFormValidate = new FormValidator(formElements, cardForm);\nvar profileFormValidate = new FormValidator(formElements, profileForm);\nvar avatarFormValidate = new FormValidator(formElements, avatarForm);\nprofileFormValidate.enableValidation();\ncardFormValidate.enableValidation();\navatarFormValidate.enableValidation();\n\n//Открытие попапа профиля\nprofileEditButton.addEventListener("click", function () {\n  var infoAboutUser = userInfo.getUserInfo();\n\n  //Добавляем имя и профессию в инпуты формы\n  nameInput.value = infoAboutUser.username;\n  jobInput.value = infoAboutUser.job;\n  profileFormValidate.resetValidation();\n  profilePopup.open();\n});\n\n//Открытие попапа добавления карточки\ncardAddButton.addEventListener("click", function () {\n  cardFormValidate.resetValidation();\n  cardPopup.open();\n});\n\n//Открытие попапа редактирования аватарки\neditAvatarButton.addEventListener("click", function () {\n  avatarFormValidate.resetValidation();\n  avatarPopup.open();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///637\n')}},__webpack_exports__={};__webpack_modules__[637]()})();